import logging

from telebot import types

from tg_bot.bot import Bot
from tg_bot.data_base import Station
from tg_bot.data_base import handlers as DBHandlers
from tg_bot.data_base.manager import find_else_create_user


__BOT = Bot('')


TRANSPORT_TYPES = {
	'plane': '‚úà',		# —Å–∞–º–æ–ª–µ—Ç
	'train': 'üöÇ',		# –ø–æ–µ–∑–¥
	'suburban': 'üöù',	# —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞
	'bus': 'üöç',		# –∞–≤—Ç–æ–±—É—Å
	'water': '‚öì',		# –º–æ—Ä—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	'helicopter': 'üöÅ',	# –≤–µ—Ä—Ç–æ–ª–µ—Ç
}
STATION_TYPES = {
	'station': 'üöâ',			# —Å—Ç–∞–Ω—Ü–∏—è
	'platform': 'üöâ',			# –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
	'stop': 'üöè',				# –æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç
	'checkpoint': 'ü™ñ',			# –±–ª–æ–∫-–ø–æ—Å—Ç
	'post': 'üöß',				# –ø–æ—Å—Ç
	'crossing': 'üõ£',			# —Ä–∞–∑—ä–µ–∑–¥
	'overtaking_point': 'üõ£',	# –æ–±–≥–æ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
	'train_station': 'üè´',		# –≤–æ–∫–∑–∞–ª
	'airport': 'üè®',			# –∞—ç—Ä–æ–ø–æ—Ä—Ç
	'bus_station': 'üè£',		# –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª
	'bus_stop': 'üöè',			# –∞–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
	'unknown': 'üöè',				# —Å—Ç–∞–Ω—Ü–∏—è –±–µ–∑ —Ç–∏–ø–∞
	'port': '‚öì',				# –ø–æ—Ä—Ç
	'port_point': '‚öì',			# –ø–æ—Ä—Ç–ø—É–Ω–∫—Ç
	'wharf': '‚öì',				# –ø—Ä–∏—Å—Ç–∞–Ω—å
	'river_port': '‚öì',			# —Ä–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª
	'marine_station': '‚öì',		# –º–æ—Ä—Å–∫–æ–π –≤–æ–∫–∑–∞–ª
}


def user_station_select(message: types.Message) -> None:
	''' –í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '''

	logging.debug('user_station_select is started')

	markup = types.InlineKeyboardMarkup()

	stations = Station.query.filter(Station.title.like(f'%{message.text}%'))
	for station in stations:
		btn_text = '{title} {transport_type}{station_type}'.format(
			title=station.title,
			transport_type=TRANSPORT_TYPES[station.transport],
			station_type=STATION_TYPES[station.type])
		btn = types.InlineKeyboardButton(btn_text, callback_data=station.yandex_code)
		markup.add(btn)

	session = __BOT.reply_to(
		message,
		'–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
		reply_markup=markup
	)
	__BOT.register_next_step_handler(session, DBHandlers.change_from_station)


def get_routes(message: types.Message) -> str:
	''' –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ '''

	user = find_else_create_user(message)
	user_station_select(message)

	return '–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
