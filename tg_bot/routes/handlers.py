import logging
from datetime import datetime, date

from telebot import types

from tg_bot.bot import Bot
from tg_bot.data_base import TelegramUser, Station
from tg_bot.data_base import handlers as DBHandlers
from tg_bot.data_base.manager import find_else_create_user
from .api import get_schedule


__BOT = Bot('')


TRANSPORT_TYPES = {
	'plane': '‚úà',		# —Å–∞–º–æ–ª–µ—Ç
	'train': 'üöÇ',		# –ø–æ–µ–∑–¥
	'suburban': 'üöù',	# —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞
	'bus': 'üöç',		# –∞–≤—Ç–æ–±—É—Å
	'water': '‚öì',		# –º–æ—Ä—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	'helicopter': 'üöÅ',	# –≤–µ—Ä—Ç–æ–ª–µ—Ç
}
STATION_TYPES = {
	'station': 'üöâ',			# —Å—Ç–∞–Ω—Ü–∏—è
	'platform': 'üöâ',			# –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
	'stop': 'üöè',				# –æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç
	'checkpoint': 'ü™ñ',			# –±–ª–æ–∫-–ø–æ—Å—Ç
	'post': 'üöß',				# –ø–æ—Å—Ç
	'crossing': 'üõ£',			# —Ä–∞–∑—ä–µ–∑–¥
	'overtaking_point': 'üõ£',	# –æ–±–≥–æ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
	'train_station': 'üè´',		# –≤–æ–∫–∑–∞–ª
	'airport': 'üè®',			# –∞—ç—Ä–æ–ø–æ—Ä—Ç
	'bus_station': 'üè£',		# –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª
	'bus_stop': 'üöè',			# –∞–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
	'unknown': 'üöè',				# —Å—Ç–∞–Ω—Ü–∏—è –±–µ–∑ —Ç–∏–ø–∞
	'port': '‚öì',				# –ø–æ—Ä—Ç
	'port_point': '‚öì',			# –ø–æ—Ä—Ç–ø—É–Ω–∫—Ç
	'wharf': '‚öì',				# –ø—Ä–∏—Å—Ç–∞–Ω—å
	'river_port': '‚öì',			# —Ä–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª
	'marine_station': '‚öì',		# –º–æ—Ä—Å–∫–æ–π –≤–æ–∫–∑–∞–ª
}


def is_valid_user_stations(user: TelegramUser) -> bool:
	''' –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω—Ü–∏–π —É –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '''

	fs = Station.query.get(user.from_station)
	ts = Station.query.get(user.to_station)

	return not (None in (fs, ts))


def user_station_select(message: types.Message, reply_text: str) -> types.Message:
	''' –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ '''

	logging.debug('user_station_select is started')

	markup = types.InlineKeyboardMarkup()

	stations = Station.query.filter(Station.title.like(f'%{message.text}%'))
	for station in stations:
		btn_text = '{transport_type}{station_type} {title} ({address})'.format(
			title=station.title,
			address=f'{station.region}, {station.settlement}' \
				if station.settlement else f'{station.region}',
			transport_type=TRANSPORT_TYPES[station.transport],
			station_type=STATION_TYPES[station.type])
		btn = types.InlineKeyboardButton(btn_text, callback_data=station.yandex_code)
		markup.add(btn)

	session = __BOT.reply_to(message, reply_text, reply_markup=markup)

	return session


def change_from_station(message: types.Message)	-> None:
	''' –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –°—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è '''

	logging.debug('routes.change_from_station is started')

	session = user_station_select(message, reply_text='–í–≤–µ–¥–∏ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:')
	__BOT.register_next_step_handler(session, DBHandlers.change_from_station)


def change_to_station(message: types.Message)	-> None:
	''' –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –°—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è '''

	logging.debug('routes.change_to_station is started')

	session = user_station_select(message, reply_text='–í–≤–µ–¥–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–±—ã—Ç–∏—è:')
	__BOT.register_next_step_handler(session, DBHandlers.change_to_station)	


def get_routes(message: types.Message, date_: date=None) -> str:
	'''
	–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤.

	~params:
	message: types.Message - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram;
	date_: date=None - –¥–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
	'''

	if date_ is None:
		date_ = datetime.now().date()

	user = find_else_create_user(message)
	from_station = Station.query.get(user.from_station)
	to_station = Station.query.get(user.to_station)

	if not is_valid_user_stations(user):
		fs = from_station.title if user.from_station else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
		ts = to_station.title if user.to_station else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
		return '–°–Ω–∞—á–∞–ª–æ –Ω–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏!\n' + \
			f'- –°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {fs}\n' + \
			f'- –°—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è: {ts}'

	schedule_json = get_schedule(from_station, to_station, date_)

	output = '{dt}\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–∂–¥—É {from_}/{to}\n\n'.format(
		from_=from_station.title,
		to=to_station.title,
		dt=date_.strftime('%d.%m.%Y')
	)
	on_hour = datetime(1970, 1, 1)

	for i, segment in enumerate(schedule_json['segments']):
		try:
			transports = (segment['from']['transport_type'],
				          segment['to']['transport_type'])
		except KeyError:
			continue
		transport_types = ''.join(map(
			lambda tt: TRANSPORT_TYPES[tt], set(transports)
		))

		departure = datetime.fromisoformat(segment['departure'][:-6])
		arrival = datetime.fromisoformat(segment['arrival'][:-6])
		duration = datetime.fromtimestamp(segment['duration'])

		if on_hour.hour != departure.hour:
			output += f'\n{departure.strftime("%H")} —á–∞—Å–æ–≤:\n'
			on_hour = departure

		departure_str = departure.strftime('%H:%M')
		arrival_str = arrival.strftime('%H:%M')
		duration = arrival - departure

		duration_hours = int(duration.total_seconds() // 60 // 60)
		duration_minutes = int(duration.total_seconds() // 60)
		duration_str = '{days}{hours}{minutes}'.format(
			days=f'{duration.days}–¥ ' if duration.days else '',
			hours=f'{duration_hours}—á ' if duration_hours else '',
			minutes=f'{duration_minutes}–º'
		)
		output += f'{departure_str} {transport_types} {arrival_str} ‚è≥{duration_str}\n'

	return output.strip()
