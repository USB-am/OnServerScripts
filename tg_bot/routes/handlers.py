import logging
from datetime import datetime

from telebot import types

from tg_bot.bot import Bot
from tg_bot.data_base import Station
from tg_bot.data_base import handlers as DBHandlers
from tg_bot.data_base.manager import find_else_create_user
from .api import get_schedule


__BOT = Bot('')


TRANSPORT_TYPES = {
	'plane': '‚úà',		# —Å–∞–º–æ–ª–µ—Ç
	'train': 'üöÇ',		# –ø–æ–µ–∑–¥
	'suburban': 'üöù',	# —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞
	'bus': 'üöç',		# –∞–≤—Ç–æ–±—É—Å
	'water': '‚öì',		# –º–æ—Ä—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	'helicopter': 'üöÅ',	# –≤–µ—Ä—Ç–æ–ª–µ—Ç
}
STATION_TYPES = {
	'station': 'üöâ',			# —Å—Ç–∞–Ω—Ü–∏—è
	'platform': 'üöâ',			# –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
	'stop': 'üöè',				# –æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç
	'checkpoint': 'ü™ñ',			# –±–ª–æ–∫-–ø–æ—Å—Ç
	'post': 'üöß',				# –ø–æ—Å—Ç
	'crossing': 'üõ£',			# —Ä–∞–∑—ä–µ–∑–¥
	'overtaking_point': 'üõ£',	# –æ–±–≥–æ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
	'train_station': 'üè´',		# –≤–æ–∫–∑–∞–ª
	'airport': 'üè®',			# –∞—ç—Ä–æ–ø–æ—Ä—Ç
	'bus_station': 'üè£',		# –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª
	'bus_stop': 'üöè',			# –∞–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
	'unknown': 'üöè',				# —Å—Ç–∞–Ω—Ü–∏—è –±–µ–∑ —Ç–∏–ø–∞
	'port': '‚öì',				# –ø–æ—Ä—Ç
	'port_point': '‚öì',			# –ø–æ—Ä—Ç–ø—É–Ω–∫—Ç
	'wharf': '‚öì',				# –ø—Ä–∏—Å—Ç–∞–Ω—å
	'river_port': '‚öì',			# —Ä–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª
	'marine_station': '‚öì',		# –º–æ—Ä—Å–∫–æ–π –≤–æ–∫–∑–∞–ª
}


def user_station_select(message: types.Message, reply_text: str) -> types.Message:
	''' –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ '''

	logging.debug('user_station_select is started')

	markup = types.InlineKeyboardMarkup()

	stations = Station.query.filter(Station.title.like(f'%{message.text}%'))
	for station in stations:
		btn_text = '{title} {transport_type}{station_type}'.format(
			title=station.title,
			transport_type=TRANSPORT_TYPES[station.transport],
			station_type=STATION_TYPES[station.type])
		btn = types.InlineKeyboardButton(btn_text, callback_data=station.yandex_code)
		markup.add(btn)

	session = __BOT.reply_to(message, reply_text, reply_markup=markup)

	return session


def change_from_station(message: types.Message)	-> None:
	''' –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –°—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è '''

	logging.debug('routes.change_from_station is started')

	session = user_station_select(message, reply_text='–í–≤–µ–¥–∏ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:')
	__BOT.register_next_step_handler(session, DBHandlers.change_from_station)


def change_to_station(message: types.Message)	-> None:
	''' –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –°—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è '''

	logging.debug('routes.change_to_station is started')

	session = user_station_select(message, reply_text='–í–≤–µ–¥–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–±—ã—Ç–∏—è:')
	__BOT.register_next_step_handler(session, DBHandlers.change_to_station)	


def get_routes(message: types.Message) -> str:
	''' –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ '''

	user = find_else_create_user(message)
	from_station = Station.query.get(user.from_station)
	to_station = Station.query.get(user.to_station)
	schedule_json = get_schedule(from_station, to_station, datetime.now().date())

	output = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–∂–¥—É {from_station.title}/{to_station.title}\n\n'

	for segment in schedule_json['segments']:
		transport_types = ''.join([TRANSPORT_TYPES[transport_type] for transport_type in set(segment['transport_types'])])
		departure = datetime.fromisoformat(segment['departure'][:-1])
		arrival = datetime.fromisoformat(segment['arrival'][:-1])

		output += f'{departure} ‚û° {arrival} {transport_types}\n'

	return output.strip()
