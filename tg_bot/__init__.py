import logging

from telebot import types

from config import TELEGRAM_TOKEN
from .bot import Bot
from .data_base.manager import find_user, find_else_create_user

_bot = Bot(TELEGRAM_TOKEN)

from .weather import handlers as Weather
from .data_base import handlers as DBHandlers


BUTTONS_TEXT = {
	'change_city': 'üöÇ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥',
	'show_weather': '‚òîÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É',
	'from_station': 'üëâ –°—Ç–∞–Ω—Ü–∏—è\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
	'to_station': 'üëà –°—Ç–∞–Ω—Ü–∏—è\n–ø—Ä–∏–±—ã—Ç–∏—è',
}


def start_bot() -> None:
	''' –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ '''

	logging.info('Telegram bot is started!')
	_bot.polling(none_stop=True, interval=0)


def stop_bot() -> None:
	''' –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ '''
	_bot.stop_bot()
	logging.warning('Telegram bot is stoped!')


@_bot.message_handler(commands=['start'])
def start(message: types.Message) -> None:
	''' –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start '''

	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

	# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞
	show_weather_btn = types.KeyboardButton(BUTTONS_TEXT['show_weather'])
	change_city_btn = types.KeyboardButton(BUTTONS_TEXT['change_city'])
	from_station_btn = types.KeyboardButton(BUTTONS_TEXT['from_station'])
	to_station_btn = types.KeyboardButton(BUTTONS_TEXT['to_station'])

	markup.add(show_weather_btn)
	markup.add(change_city_btn)
	markup.add(from_station_btn, to_station_btn)

	# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
	user = find_else_create_user(message)

	# –í–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
	_bot.send_message(
		message.from_user.id,
		f'–ù—É –ø—Ä–∏–≤–µ—Ç, {user.name}!', reply_markup=markup
	)


@_bot.message_handler(content_types=['text'])
def get_text_messages(message) -> None:
	''' –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ '''

	msg = message.text.lower().strip()

	if msg == BUTTONS_TEXT['show_weather'].lower():
		weather_text = Weather.get_weather(message)

		if weather_text is None:
			_bot.send_message(
				message.from_user.id,
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã.\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üòÑ'
			)
			logging.warning('Weather parser encountered an error.')
		else:
			_bot.send_message(
				message.from_user.id,
				weather_text,
				parse_mode='Markdown'
			)
			logging.info(f'Send {find_user(message)} current weather.')

	elif msg == BUTTONS_TEXT['change_city'].lower():
		session = _bot.reply_to(message,
			'–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–û—Ç–º–µ–Ω–∞"'
		)
		_bot.register_next_step_handler(session, DBHandlers.change_city)

	else:
		_bot.send_message(
			message.from_user.id,
			'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.\n–í–≤–µ–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–∞!'
		)
